#!/usr/bin/env python3

from dataclasses import dataclass
import subprocess
import os
import sys
import argparse
from typing import cast


def new_session(session_name: str, window_name: str, command: list[str] | None = None) -> None:
  session_cmd = " ".join(command) if command is not None else ""
  _ = subprocess.run(["tmux", "new-session", "-d", "-s", session_name, "-n", window_name, session_cmd])


def new_window(session_name: str, window_name: str) -> None:
  _ = subprocess.run(["tmux", "new-window", "-t", session_name, "-n", window_name])


def has_session(session_name: str) -> bool:
  res = subprocess.run(["tmux", "has-session", "-t", session_name])
  return res.returncode == 0


def activate_window(session_name: str, window_name: str) -> None:
  _ = subprocess.run(["tmux", "select-window", "-t", f"{session_name}:{window_name}"])


def attach(session_name: str) -> None:
  os.execvp("tmux", ["tmux", "attach", "-t", session_name])


@dataclass(frozen=True)
class Arguments:
  session_name: str


def parse_parameters(args: list[str]) -> Arguments:
  parser = argparse.ArgumentParser(
    prog="dev",
  )
  _ = parser.add_argument("session_name", nargs=1)
  parsed_args = parser.parse_args(args[1:])

  maybe_session_name = cast(list[str], parsed_args.session_name)
  if len(maybe_session_name) != 1:
    raise ValueError("session_name is not set correctly")
  arguments = Arguments(session_name=maybe_session_name[0])
  return arguments


if __name__ == "__main__":
  args = parse_parameters(sys.argv)
  session_name = args.session_name
  if has_session(session_name):
    attach(session_name)
  else:
    new_session(session_name, "source", ["nvim", "."])
    new_window(session_name, "shell")
    activate_window(session_name, "source")
    attach(session_name)

# if tmux has-session "$1"; then
#   tmux attach -t "$1"
# else
#   tmux new-session -d -s "$1" -n "source"
#   tmux new-window -t "$1" -d -n "shell"
# fi
